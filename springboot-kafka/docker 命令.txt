#nacos
sh startup.sh -m standalone
sh shutdown.sh
#sentinel
java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar &

cp -r /home/packageA/. /home/cp/packageB/

# 开机自启
sudo systemctl enable docker
# 启动docker服务
sudo systemctl start docker
#查看防火墙状态：
 sudo firewall-cmd --state
#关闭防火墙
    关闭： systemctl stop firewalld
#开机禁用  ： systemctl disable firewalld
#重启docker
systemctl restart docker
#设值自动重启
docker container update --restart=always 容器名字
进入容器：docker exec -it [容器ID] bash


# 下载镜像：docker pull <镜像名:tag>    如：下载centos镜像
docker pull centos
docker pull sameersbn/redmine:latest
# 查看已下载镜像
docker images
# 删除容器
docker rm <容器名 or ID>
# 查看容器日志
docker logs -f <容器名 or ID>
# 查看正在运行的容器
docker ps
# 查看所有的容器，包括已经停止的。
docker ps -a
# 删除所有容器
docker rm $(docker ps -a -q)
# 停止、启动、杀死指定容器
docker start <容器名 or ID> # 启动容器
docker stop <容器名 or ID> # 启动容器
docker kill <容器名 or ID> # 杀死容器
# 后台运行 docker run -d <Other Parameters>
docker run -d -p 127.0.0.1:33301:22 centos6-ssh
# 暴露端口： 一共有三种形式进行端口映射
docker -p ip:hostPort:containerPort # 映射指定地址的主机端口到容器端口
# 例如：docker -p 127.0.0.1:3306:3306 映射本机3306端口到容器的3306端口
docker -p ip::containerPort # 映射指定地址的任意可用端口到容器端口
# 例如：docker -p 127.0.0.1::3306 映射本机的随机可用端口到容器3306端口
docer -p hostPort:containerPort # 映射本机的指定端口到容器的指定端口
# 例如：docker -p 3306:3306 # 映射本机的3306端口到容器的3306端口
# 映射数据卷
docker -v /home/data:/opt/data # 这里/home/data 指的是宿主机的目录地址，后者则是容器的目录地址
--restart=always：在docker run后面加上--restart=always就会进行断开自动重启
-d:将docker运行在后台


#查看日志
docker logs -f -t --since="2017-05-31" --tail=10 edu_web_1
docker logs -f --tail=10 testDocker
--since : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志
-f : 查看实时日志
-t : 查看日志产生的日期
-tail=10 : 查看最后的10条日志。
edu_web_1 : 容器名称

#docker 镜像启动成功但是无法访问
解决办法：
vi /etc/sysctl.conf
或者
vi /usr/lib/sysctl.d/00-system.conf
添加如下代码：
    net.ipv4.ip_forward=1
重启network服务
nmcli c reload
systemctl restart network
查看是否修改成功
sysctl net.ipv4.ip_forward
如果返回为“net.ipv4.ip_forward = 1”则表示成功了


#idea无法连接docker
1.修改docker配置文件
[xxx@root]#vi /usr/lib/systemd/system/docker.service
修改
ExecStart=/usr/bin/dockerd
#centos设置：
-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock 


#tomcat
docker run -itd --name=young_tomcat -p 8080:8080 -v /usr/local/myhtml:/usr/local/tomcat/webapps --privileged=true tomcat:8.5.56
#mysql
docker run --restart=always -p 3306:3306 --name young_mysql -v /usr/data/mysql/conf:/etc/mysql  -v /usr/data/mysql/logs:/var/log/mysql -v /usr/data/mysql/data:/var/lib/mysql -v /usr/data/mysql/my.cnf:/etc/mysql/my.cnf -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0
#redis
docker run -p 6379:6379 -v /usr/data/redis/data:/data --restart=always --name young_redis -d redis:4.0.8 redis-server --appendonly yes --requirepass "123456"
#rabbitmq
docker run -d --name young_rabbitmq -p 5672:5672 -p 15672:15672 -v /usr/data/rabbitmq/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.7.7-management
#可视化
docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer-test portainer/portainer
#zookeeper
docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2  --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper
#kafka
docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=47.93.236.174:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://47.93.236.174:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka
#SVN
docker run --restart always --name svn -d -v /usr/data/svn/data:/var/opt/svn -p 3690:3690 garethflowers/svn-server
#mongodb
docker run -p 27017:27017 -v /usr/data/data/mongo:/data/db --name mongodb -d mongo  --auth
#CAS
docker run  --restart=always  --name cas -p 8443:8443 -p 8878:8080 apereo/cas:v5.3.10 /bin/sh /cas-overlay/bin/run-cas.sh

keytool -genkeypair -alias cas -keyalg RSA -keypass changeit \
        -storepass changeit -keystore ./server.keystore \
        -dname "CN=cas.young.org,OU=Young,OU=Org,C=AU" \
        -ext SAN="dns:young.org,dns:localhost,ip:127.0.0.1"
echo '127.0.0.1 cas.young.org' >> /etc/hosts
# nacos
docker run -d \
-e PREFER_HOST_MODE=ip \
-e MODE=standalone \
-e SPRING_DATASOURCE_PLATFORM=mysql \
-e MYSQL_SERVICE_HOST=47.93.236.174 \
-e MYSQL_SERVICE_PORT=3306 \
-e MYSQL_SERVICE_USER=root \
-e MYSQL_SERVICE_PASSWORD=123456 \
-e MYSQL_SERVICE_DB_NAME=nacos_config \
-e TIME_ZONE='Asia/Shanghai' \
-v /usr/data/nacos-1.3.1/logs:/home/nacos/logs \
-p 8848:8848 \
--name nacos-1.3.1 \
--restart=always \
nacos/nacos-server:1.3.1

docker run -d \
--name nacos-server \
-e PREFER_HOST_MODE=ip \
-e MODE=standalone \
-e SPRING_DATASOURCE_PLATFORM=mysql \
-e MYSQL_SERVICE_HOST=localhost \
-e MYSQL_SERVICE_USER=root \
-e MYSQL_SERVICE_PASSWORD=123456 \
-e MYSQL_SERVICE_DB_NAME=nacos_config \
-p 8848:8848 \
nacos/nacos-server:1.4.0

#minio
docker run -p 9900:9000 --name minio -d --restart=always -e "MINIO_ACCESS_KEY=admin" -e "MINIO_SECRET_KEY=admin123456" -v /usr/data/minio/data:/data -v /usr/data/minio/home/config:/root/.minio minio/minio server /data
#jenkins
docker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins
##sentinel
docker run --name sentinel -d -p 8858:8858 -d bladex/sentinel-dashboard:1.7.1
# sh
source /etc/profile
pkill -f /root/springcloud/cloudalibaba-sentinel-service8401-1.0-SNAPSHOT.jar
nohup java -jar /root/springcloud/cloudalibaba-sentinel-service8401-1.0-SNAPSHOT.jar > nohup.log 2>&1 &
##seata
docker run -d --name seata-server --privileged=true\
        -p 8091:8091 \
        -e SEATA_IP=47.93.236.174 \
        -e STORE_MODE=db \
        -e SEATA_CONFIG_NAME=file:/root/seata-config/registry \
        -v /root/seata-config:/root/seata-config  \
        seataio/seata-server:1.2.0

##rocket mq
docker run -d -p 9876:9876 -v /usr/data/mq/data/namesrv/logs:/root/logs -v /usr/data/mq/data/namesrv/store:/root/store --name rmqnamesrv -e "MAX_POSSIBLE_HEAP=100000000" rocketmqinc/rocketmq:4.4.0 sh mqnamesrv

docker run -d -p 10911:10911 -p 10909:10909 -v  /usr/data/mq/data/broker/logs:/root/logs -v  /usr/data/mq/rocketmq/data/broker/store:/root/store -v  /usr/data/mq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf --name rmqbroker --link rmqnamesrv:namesrv -e "NAMESRV_ADDR=namesrv:9876" -e "MAX_POSSIBLE_HEAP=200000000" rocketmqinc/rocketmq:4.4.0 sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf

docker run -e "JAVA_OPTS=-Drocketmq.namesrv.addr=47.93.236.174:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false" -p 8083:8080 -t styletang/rocketmq-console-ng

#kkfileview
docker run -d -it -p 8012:8012 keking/kkfileview

#kafka 一直重启解决办法
（1）、创建swapfile：
root权限下，创建swapfile  # dd  if=/dev/zero  of=swapfile  bs=1024  count=500000  （有时会遇到dd命令不识别 可能是你安装过一次了 没事 先把swapfile删除就ok了）
（2）、将swapfile设置为swap空间
# mkswap swapfile
（3）、启用交换空间，这个操作有点类似于mount操作（个人理解）：
# swapon  swapfile （删除交换空间 swapoff swapfile）

mvn package -Dmaven.test.skip=true


#docker 从容器里面拷文件到宿主机
 docker cp 容器名：要拷贝的文件在容器里面的路径       要拷贝到宿主机的相应路径
 docker cp  1c95304de879:logs /root/logs


#IDEA 连docker 无ca方式
ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock  -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock
